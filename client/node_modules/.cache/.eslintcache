[{"/Users/taylorcunningham/Desktop/Design/project-code/client/src/index.js":"1","/Users/taylorcunningham/Desktop/Design/project-code/client/src/pages/MapPage.js":"2","/Users/taylorcunningham/Desktop/Design/project-code/client/src/pages/HomePage.js":"3","/Users/taylorcunningham/Desktop/Design/project-code/client/src/fetcher.js":"4","/Users/taylorcunningham/Desktop/Design/project-code/client/src/components/MenuBar.js":"5","/Users/taylorcunningham/Desktop/Design/project-code/client/src/pages/QualityPage.js":"6","/Users/taylorcunningham/Desktop/Design/project-code/client/src/components/StateNameArray.js":"7"},{"size":798,"mtime":1681347509382,"results":"8","hashOfConfig":"9"},{"size":7694,"mtime":1675132854335,"results":"10","hashOfConfig":"9"},{"size":1230,"mtime":1681347344771,"results":"11","hashOfConfig":"9"},{"size":3343,"mtime":1681360108485,"results":"12","hashOfConfig":"9"},{"size":850,"mtime":1681347482990,"results":"13","hashOfConfig":"9"},{"size":8238,"mtime":1681360418645,"results":"14","hashOfConfig":"9"},{"size":851,"mtime":1681349887117,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1qgwk1y",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/taylorcunningham/Desktop/Design/project-code/client/src/index.js",[],["33","34"],"/Users/taylorcunningham/Desktop/Design/project-code/client/src/pages/MapPage.js",["35","36","37","38","39","40","41","42","43","44","45","46","47"],"import React, { Component } from 'react';\nimport USAMap from \"react-usa-map\";\nimport { Form, FormInput, FormGroup, Button, } from \"shards-react\";\nimport {\n  Table,\n  Pagination,\n  Select,\n  Row\n} from 'antd'\n\nimport MenuBar from '../components/MenuBar';\nimport { getNewsRankings, getNameFromCode, getCountiesFromState, getCodeToNumericRanking, getAccessRankings, getQualityRankings, getPublicHealthRankings } from '../fetcher'\nconst { Column, ColumnGroup } = Table;\nconst { Option } = Select;\n\n// COLUMNS FOR STATE DISPLAY\nconst stateColumns = [\n    {\n      title: 'State',\n      dataIndex: 'Name',\n      key: 'Name'\n    },\n    {\n      title: 'Code',\n      dataIndex: 'Code',\n      key: 'Code'\n    },\n    {\n      title: 'Health Care Access Ranking',\n      dataIndex: 'HealthCareAccessRanking',\n      key: 'HealthCareAccessRanking'\n      \n    },\n    {\n      title: 'Health Care Quality Ranking',\n      dataIndex: 'HealthCareQualityRanking',\n      key: 'HealthCareQualityRanking'\n    },\n    {\n        title: 'Public Health Ranking',\n        dataIndex: 'PublicHealthRanking',\n        key: 'PublicHealthRanking'\n    },\n    {\n        title: 'Composite Ranking',\n        dataIndex: 'CompositeRanking',\n        key: 'CompositeRanking'\n    }\n];\n\n\n// COLUMNS FOR COUNTY DISPLAY\nconst countyColumns = [\n    {\n        title: 'County Name',\n        dataIndex: 'name',\n        key: 'name',\n        sorter: (a, b) => a.name.localeCompare(b.name)\n      },\n      {\n        title: 'Numeric Code',\n        dataIndex: 'fips',\n        key: 'fips'\n      },\n];\n\nclass MapPage extends React.Component {\n    // CLASS CONSTRUCTOR\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            selectedState: \"\",\n            stateRankingMethod: \"Overall\",\n            stateResults: [],\n            countyResults: [],\n            stateCodeToNumericRanking: [], \n        }\n\n        this.handleStateSelected = this.handleStateSelected.bind(this)\n        this.setStateRankingMethod = this.setStateRankingMethod.bind(this)\n        this.mapHandler = this.mapHandler.bind(this)\n        this.statesCustomConfig = this.statesCustomConfig.bind(this)\n    }\n\n    // MAP HANDLER FROM API \n    mapHandler = (event) => {\n        this.handleStateSelected(event.target.dataset.name)\n    };\n\n    // CONFIGURATION FOR STATE COLORING\n    statesCustomConfig = () => {\n        // initialize ranking data\n        var rankingData = {}\n\n        // mapping of states to rankings \n        this.state.stateCodeToNumericRanking.map((name, index) => {\n            // initialize variables\n            var stateCode = name.Code\n            var stateRanking = name.Ranking\n            var color = \"\"\n\n            // if looking at overall rankings \n            if (this.state.stateRankingMethod == \"Overall\") {\n                console.log('setting overall rankings')\n                // sort by \n                if (stateRanking <= 30) {\n                    color = \"green\"\n                } else if (stateRanking <= 110) {\n                    color = \"yellow\"\n                } else {\n                    color = \"red\"\n                }\n            }\n\n            // if looking at other rankings \n            else {\n                console.log('setting other rankings')\n                // sort by \n                if (stateRanking <= 15) {\n                    color = \"green\"\n                } else if (stateRanking <= 35) {\n                    color = \"yellow\"\n                } else {\n                    color = \"red\"\n                }\n            }\n            \n\n            // fill in object data\n            var stateCodeFill = {}\n            stateCodeFill[\"fill\"] =  color\n            rankingData[stateCode] = stateCodeFill\n        });\n\n        return rankingData;\n    };\n\n    // HANDLE STATE BEING SELECTED, GET DATA\n    handleStateSelected(stateCode) {\n        // call function to get state name from code \n        getNameFromCode(stateCode).then(res => {\n            this.setState({ selectedState: res.results[0].Name })\n        });\n\n        // call function to get rankings\n        getNewsRankings(stateCode).then(res => {\n            this.setState({ stateResults: res.results })\n        });\n\n        // call function to get list of all counties \n        getCountiesFromState(stateCode).then(res => {\n            this.setState({ countyResults: res.results })\n        });\n    }\n\n    // SET STATE RANKING METHOD FROM DROPDOWN\n    setStateRankingMethod(value) {\n        // set state ranking method internally \n        this.setState({ stateRankingMethod: value })\n\n        // call function to get values and change colors accordingly \n        if (value == \"HealthCareAccess\") {\n            getAccessRankings().then(res => {\n                this.setState({ stateCodeToNumericRanking: res.results })\n            });\n        } else if (value == \"Overall\") {\n            getCodeToNumericRanking().then(res => {\n                this.setState({ stateCodeToNumericRanking: res.results })\n            });\n        } else if (value == \"HealthCareQuality\") {\n            getQualityRankings().then(res => {\n                this.setState({ stateCodeToNumericRanking: res.results })\n            });\n        } else if (value == \"PublicHealth\") {\n            getPublicHealthRankings().then(res => {\n                this.setState({ stateCodeToNumericRanking: res.results })\n            });\n        }\n    }  \n\n    componentDidMount() {\n        // when component originally mounts, set overall rankings\n         getCodeToNumericRanking().then(res => {\n            this.setState({ stateCodeToNumericRanking: res.results })\n        }); \n    } \n\n  render() {\n\n    return (\n        <div className=\"App\">\n        <MenuBar />\n        <Form style={{ width: '80vw', margin: '0 auto', marginTop: '5vh' }}>\n            <Row>\n                <h3> Welcome to MedMap main interface!</h3>\n                <p> This ranking system is based on a 1st to 50th ranking by state in three categories: healthcare access, healthcare quality,\n                    and public health. For ranking selection in each of these categories, a 'green' state is ranked between 1st and 15th, a 'yellow' state \n                    is ranked between 16th and 35th, and a 'red' state is ranked between 36th and 50th.  For the overall ranking selection, a 'green' state has a composite score (added) of 3 to 30, a 'yellow' \n                    state has a score of 31 to 110, and a 'red' state has a score of 111 to 150. \n                </p>\n            </Row>\n            <Row>\n            <Select defaultValue=\"Overall\" style={{ width: 170 }} onChange={this.setStateRankingMethod}>\n                                <Option value=\"Overall\">Overall</Option>\n                                <Option value=\"HealthCareAccess\">Healthcare Access</Option>\n                                <Option value=\"HealthCareQuality\">Healthcare Quality</Option>\n                                <Option value=\"PublicHealth\">Public Health</Option>\n                            </Select> \n            </Row>\n          <Row> \n            <USAMap customize={this.statesCustomConfig()} onClick={this.mapHandler} />\n          </Row>\n          <Row>\n            <label><strong>Selected State: {this.state.selectedState} </strong></label>\n        </Row><Row>\n            <Table dataSource={this.state.stateResults} columns={stateColumns} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}/>\n          </Row>\n          <Row>\n          <Table dataSource={this.state.countyResults} columns={countyColumns} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}/>\n          </Row>\n        \n        </Form>\n        </div>\n      );\n  }\n}\n\nexport default MapPage","/Users/taylorcunningham/Desktop/Design/project-code/client/src/pages/HomePage.js",["48","49","50","51","52","53","54","55"],"import React from 'react';\nimport { Form, FormInput, FormGroup, Button, } from \"shards-react\";\nimport {\n  Table,\n  Pagination,\n  Select,\n  Row\n} from 'antd'\n\nimport MenuBar from '../components/MenuBar';\nconst { Column, ColumnGroup } = Table;\nconst { Option } = Select;\n\nvar mapboxgl = require('mapbox-gl/dist/mapbox-gl.js');\n\nmapboxgl.accessToken = 'pk.eyJ1IjoidGF5bG9yY3UiLCJhIjoiY2xiYm93Znh1MDBvbDNwb280ODhhMHJhbyJ9.0N14a-R8mihTSAG4NTvGlw';\n\n\nclass HomePage extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n    }\n\n  }\n\n  componentDidMount() {\n    var map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/mapbox/streets-v11'\n    });\n  }\n\n \n  \n\n\n  render() {\n\n    return (\n      <html>\n      <head>\n      </head>\n      <body>\n      <div>\n        <MenuBar />\n        <Form style={{ width: '80vw', margin: '0 auto', marginTop: '5vh' }}>\n          <Row>\n          <h3> Welcome to 'MedMap' Application! </h3>\n          </Row>\n          <Row>\n          <div id=\"map\" style={{position: \"absolute\", top: \"0\", bottom: \"0\", width: \"100%\" }}></div>\n          </Row>\n        \n        </Form>\n      </div>\n     \n      </body>\n      </html>\n    )\n  }\n}\n\nexport default HomePage\n\n","/Users/taylorcunningham/Desktop/Design/project-code/client/src/fetcher.js",[],"/Users/taylorcunningham/Desktop/Design/project-code/client/src/components/MenuBar.js",[],"/Users/taylorcunningham/Desktop/Design/project-code/client/src/pages/QualityPage.js",["56","57","58","59","60","61","62","63"],"/Users/taylorcunningham/Desktop/Design/project-code/client/src/components/StateNameArray.js",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":1,"column":17,"nodeType":"70","messageId":"71","endLine":1,"endColumn":26},{"ruleId":"68","severity":1,"message":"72","line":3,"column":16,"nodeType":"70","messageId":"71","endLine":3,"endColumn":25},{"ruleId":"68","severity":1,"message":"73","line":3,"column":27,"nodeType":"70","messageId":"71","endLine":3,"endColumn":36},{"ruleId":"68","severity":1,"message":"74","line":3,"column":38,"nodeType":"70","messageId":"71","endLine":3,"endColumn":44},{"ruleId":"68","severity":1,"message":"75","line":6,"column":3,"nodeType":"70","messageId":"71","endLine":6,"endColumn":13},{"ruleId":"68","severity":1,"message":"76","line":13,"column":9,"nodeType":"70","messageId":"71","endLine":13,"endColumn":15},{"ruleId":"68","severity":1,"message":"77","line":13,"column":17,"nodeType":"70","messageId":"71","endLine":13,"endColumn":28},{"ruleId":"78","severity":1,"message":"79","line":97,"column":64,"nodeType":"80","messageId":"81","endLine":97,"endColumn":66},{"ruleId":"82","severity":1,"message":"83","line":104,"column":47,"nodeType":"84","messageId":"85","endLine":104,"endColumn":49},{"ruleId":"82","severity":1,"message":"83","line":163,"column":19,"nodeType":"84","messageId":"85","endLine":163,"endColumn":21},{"ruleId":"82","severity":1,"message":"83","line":167,"column":26,"nodeType":"84","messageId":"85","endLine":167,"endColumn":28},{"ruleId":"82","severity":1,"message":"83","line":171,"column":26,"nodeType":"84","messageId":"85","endLine":171,"endColumn":28},{"ruleId":"82","severity":1,"message":"83","line":175,"column":26,"nodeType":"84","messageId":"85","endLine":175,"endColumn":28},{"ruleId":"68","severity":1,"message":"72","line":2,"column":16,"nodeType":"70","messageId":"71","endLine":2,"endColumn":25},{"ruleId":"68","severity":1,"message":"73","line":2,"column":27,"nodeType":"70","messageId":"71","endLine":2,"endColumn":36},{"ruleId":"68","severity":1,"message":"74","line":2,"column":38,"nodeType":"70","messageId":"71","endLine":2,"endColumn":44},{"ruleId":"68","severity":1,"message":"75","line":5,"column":3,"nodeType":"70","messageId":"71","endLine":5,"endColumn":13},{"ruleId":"68","severity":1,"message":"76","line":11,"column":9,"nodeType":"70","messageId":"71","endLine":11,"endColumn":15},{"ruleId":"68","severity":1,"message":"77","line":11,"column":17,"nodeType":"70","messageId":"71","endLine":11,"endColumn":28},{"ruleId":"68","severity":1,"message":"86","line":12,"column":9,"nodeType":"70","messageId":"71","endLine":12,"endColumn":15},{"ruleId":"68","severity":1,"message":"87","line":30,"column":9,"nodeType":"70","messageId":"71","endLine":30,"endColumn":12},{"ruleId":"68","severity":1,"message":"69","line":1,"column":17,"nodeType":"70","messageId":"71","endLine":1,"endColumn":26},{"ruleId":"68","severity":1,"message":"88","line":2,"column":8,"nodeType":"70","messageId":"71","endLine":2,"endColumn":14},{"ruleId":"68","severity":1,"message":"72","line":3,"column":16,"nodeType":"70","messageId":"71","endLine":3,"endColumn":25},{"ruleId":"68","severity":1,"message":"74","line":3,"column":38,"nodeType":"70","messageId":"71","endLine":3,"endColumn":44},{"ruleId":"68","severity":1,"message":"75","line":6,"column":3,"nodeType":"70","messageId":"71","endLine":6,"endColumn":13},{"ruleId":"68","severity":1,"message":"76","line":14,"column":9,"nodeType":"70","messageId":"71","endLine":14,"endColumn":15},{"ruleId":"68","severity":1,"message":"77","line":14,"column":17,"nodeType":"70","messageId":"71","endLine":14,"endColumn":28},{"ruleId":"89","severity":1,"message":"90","line":234,"column":22,"nodeType":"91","endLine":234,"endColumn":58},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'FormInput' is defined but never used.","'FormGroup' is defined but never used.","'Button' is defined but never used.","'Pagination' is defined but never used.","'Column' is assigned a value but never used.","'ColumnGroup' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Option' is assigned a value but never used.","'map' is assigned a value but never used.","'USAMap' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]