{"ast":null,"code":"var _jsxFileName = \"/Users/taylorcunningham/Desktop/Design/project-code/client/src/pages/QualityPage.js\";\nimport React, { Component } from 'react';\nimport USAMap from \"react-usa-map\";\nimport { Form, FormInput, FormGroup, Button } from \"shards-react\";\nimport { Table, Pagination, Select, Row } from 'antd';\nimport MenuBar from '../components/MenuBar';\nimport { stateNames } from '../components/StateNameArray';\nimport { getCountyMapLink } from '../fetcher';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Column,\n  ColumnGroup\n} = Table;\nconst {\n  Option\n} = Select; // COLUMNS FOR STATE DISPLAY\n\nconst stateColumns = [{\n  title: 'State',\n  dataIndex: 'Name',\n  key: 'Name'\n}, {\n  title: 'Code',\n  dataIndex: 'Code',\n  key: 'Code'\n}, {\n  title: 'Health Care Access Ranking',\n  dataIndex: 'HealthCareAccessRanking',\n  key: 'HealthCareAccessRanking'\n}, {\n  title: 'Health Care Quality Ranking',\n  dataIndex: 'HealthCareQualityRanking',\n  key: 'HealthCareQualityRanking'\n}, {\n  title: 'Public Health Ranking',\n  dataIndex: 'PublicHealthRanking',\n  key: 'PublicHealthRanking'\n}, {\n  title: 'Composite Ranking',\n  dataIndex: 'CompositeRanking',\n  key: 'CompositeRanking'\n}]; // COLUMNS FOR COUNTY DISPLAY\n\nconst countyColumns = [{\n  title: 'County Name',\n  dataIndex: 'name',\n  key: 'name',\n  sorter: (a, b) => a.name.localeCompare(b.name)\n}, {\n  title: 'Numeric Code',\n  dataIndex: 'fips',\n  key: 'fips'\n}];\n\nclass QualityPage extends React.Component {\n  // CLASS CONSTRUCTOR\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedState: \"\",\n      countyMapLink: \"\"\n    };\n    this.handleStateSelected = this.handleStateSelected.bind(this); //this.setStateRankingMethod = this.setStateRankingMethod.bind(this)\n    //this.mapHandler = this.mapHandler.bind(this)\n    //this.statesCustomConfig = this.statesCustomConfig.bind(this)\n  } // HANDLE STATE BEING SELECTED, GET DATA\n\n\n  handleStateSelected(value) {\n    // set state \n    this.setState({\n      selectedState: value\n    }); // call function to get county map link \n\n    getCountyMapLink(value).then(res => {\n      this.setState({\n        countyMapLink: res.results[0].Link\n      });\n    });\n    /*\n    // call function to get state name from code \n    getNameFromCode(stateCode).then(res => {\n        this.setState({ selectedState: res.results[0].Name })\n    });\n     // call function to get rankings\n    getNewsRankings(stateCode).then(res => {\n        this.setState({ stateResults: res.results })\n    });\n     // call function to get list of all counties \n    getCountiesFromState(stateCode).then(res => {\n        this.setState({ countyResults: res.results })\n    });\n    */\n  }\n  /*\n  // SET STATE RANKING METHOD FROM DROPDOWN\n  setStateRankingMethod(value) {\n      // set state ranking method internally \n      this.setState({ stateRankingMethod: value })\n       // call function to get values and change colors accordingly \n      if (value == \"HealthCareAccess\") {\n          getAccessRankings().then(res => {\n              this.setState({ stateCodeToNumericRanking: res.results })\n          });\n      } else if (value == \"Overall\") {\n          getCodeToNumericRanking().then(res => {\n              this.setState({ stateCodeToNumericRanking: res.results })\n          });\n      } else if (value == \"HealthCareQuality\") {\n          getQualityRankings().then(res => {\n              this.setState({ stateCodeToNumericRanking: res.results })\n          });\n      } else if (value == \"PublicHealth\") {\n          getPublicHealthRankings().then(res => {\n              this.setState({ stateCodeToNumericRanking: res.results })\n          });\n      }\n  }  \n  */\n\n\n  componentDidMount() {\n    /*\n    // when component originally mounts, set overall rankings\n     getCodeToNumericRanking().then(res => {\n        this.setState({ stateCodeToNumericRanking: res.results })\n    }); \n    */\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(MenuBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        style: {\n          width: '80vw',\n          margin: '0 auto',\n          marginTop: '5vh'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \" Quality of Healthcare by State\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \" On this page, you can select a state and see its rankings and data about the quality of healthcare within each county. These metrics are determined based on: TODO. Select a state to start.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(FormGroup, {\n            style: {\n              width: '20vw',\n              margin: '0 auto'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Select a state.\\xA0\\xA0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 28\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              defaultValue: \"Select\",\n              style: {\n                width: 170\n              },\n              onChange: this.handleStateSelected,\n              children: stateNames.map((item, index) => {\n                return /*#__PURE__*/_jsxDEV(Option, {\n                  value: item,\n                  children: item\n                }, item, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 31\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.countyMapLink\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 22\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            dataSource: this.state.countyResults,\n            columns: countyColumns,\n            pagination: {\n              pageSizeOptions: [5, 10],\n              defaultPageSize: 5,\n              showQuickJumper: true\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default QualityPage;","map":{"version":3,"sources":["/Users/taylorcunningham/Desktop/Design/project-code/client/src/pages/QualityPage.js"],"names":["React","Component","USAMap","Form","FormInput","FormGroup","Button","Table","Pagination","Select","Row","MenuBar","stateNames","getCountyMapLink","Column","ColumnGroup","Option","stateColumns","title","dataIndex","key","countyColumns","sorter","a","b","name","localeCompare","QualityPage","constructor","props","state","selectedState","countyMapLink","handleStateSelected","bind","value","setState","then","res","results","Link","componentDidMount","render","width","margin","marginTop","map","item","index","countyResults","pageSizeOptions","defaultPageSize","showQuickJumper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport USAMap from \"react-usa-map\";\nimport { Form, FormInput, FormGroup, Button, } from \"shards-react\";\nimport {\n  Table,\n  Pagination,\n  Select,\n  Row\n} from 'antd'\n\nimport MenuBar from '../components/MenuBar';\nimport { stateNames } from '../components/StateNameArray';\nimport { getCountyMapLink } from '../fetcher'\nconst { Column, ColumnGroup } = Table;\nconst { Option } = Select;\n\n// COLUMNS FOR STATE DISPLAY\nconst stateColumns = [\n    {\n      title: 'State',\n      dataIndex: 'Name',\n      key: 'Name'\n    },\n    {\n      title: 'Code',\n      dataIndex: 'Code',\n      key: 'Code'\n    },\n    {\n      title: 'Health Care Access Ranking',\n      dataIndex: 'HealthCareAccessRanking',\n      key: 'HealthCareAccessRanking'\n      \n    },\n    {\n      title: 'Health Care Quality Ranking',\n      dataIndex: 'HealthCareQualityRanking',\n      key: 'HealthCareQualityRanking'\n    },\n    {\n        title: 'Public Health Ranking',\n        dataIndex: 'PublicHealthRanking',\n        key: 'PublicHealthRanking'\n    },\n    {\n        title: 'Composite Ranking',\n        dataIndex: 'CompositeRanking',\n        key: 'CompositeRanking'\n    }\n];\n\n\n// COLUMNS FOR COUNTY DISPLAY\nconst countyColumns = [\n    {\n        title: 'County Name',\n        dataIndex: 'name',\n        key: 'name',\n        sorter: (a, b) => a.name.localeCompare(b.name)\n      },\n      {\n        title: 'Numeric Code',\n        dataIndex: 'fips',\n        key: 'fips'\n      },\n];\n\nclass QualityPage extends React.Component {\n    // CLASS CONSTRUCTOR\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            selectedState: \"\",\n            countyMapLink: \"\"\n        }\n\n        this.handleStateSelected = this.handleStateSelected.bind(this)\n        //this.setStateRankingMethod = this.setStateRankingMethod.bind(this)\n        //this.mapHandler = this.mapHandler.bind(this)\n        //this.statesCustomConfig = this.statesCustomConfig.bind(this)\n    }\n\n    // HANDLE STATE BEING SELECTED, GET DATA\n    handleStateSelected(value) {\n        // set state \n        this.setState({ selectedState: value });\n\n        // call function to get county map link \n        getCountyMapLink(value).then(res => {\n            this.setState({countyMapLink: res.results[0].Link })\n        });\n\n        /*\n        // call function to get state name from code \n        getNameFromCode(stateCode).then(res => {\n            this.setState({ selectedState: res.results[0].Name })\n        });\n\n        // call function to get rankings\n        getNewsRankings(stateCode).then(res => {\n            this.setState({ stateResults: res.results })\n        });\n\n        // call function to get list of all counties \n        getCountiesFromState(stateCode).then(res => {\n            this.setState({ countyResults: res.results })\n        });\n        */\n    }\n\n    /*\n    // SET STATE RANKING METHOD FROM DROPDOWN\n    setStateRankingMethod(value) {\n        // set state ranking method internally \n        this.setState({ stateRankingMethod: value })\n\n        // call function to get values and change colors accordingly \n        if (value == \"HealthCareAccess\") {\n            getAccessRankings().then(res => {\n                this.setState({ stateCodeToNumericRanking: res.results })\n            });\n        } else if (value == \"Overall\") {\n            getCodeToNumericRanking().then(res => {\n                this.setState({ stateCodeToNumericRanking: res.results })\n            });\n        } else if (value == \"HealthCareQuality\") {\n            getQualityRankings().then(res => {\n                this.setState({ stateCodeToNumericRanking: res.results })\n            });\n        } else if (value == \"PublicHealth\") {\n            getPublicHealthRankings().then(res => {\n                this.setState({ stateCodeToNumericRanking: res.results })\n            });\n        }\n    }  \n    */\n\n    componentDidMount() {\n        /*\n        // when component originally mounts, set overall rankings\n         getCodeToNumericRanking().then(res => {\n            this.setState({ stateCodeToNumericRanking: res.results })\n        }); \n        */\n    } \n\n  render() {\n\n    return (\n        <div className=\"App\">\n        <MenuBar />\n        <Form style={{ width: '80vw', margin: '0 auto', marginTop: '5vh' }}>\n            <Row>\n                <h3> Quality of Healthcare by State</h3>\n                <p> On this page, you can select a state and see its rankings and data about the quality of healthcare within each \n                    county. These metrics are determined based on: TODO. Select a state to start. \n                </p>\n            </Row>\n            <Row>\n                <FormGroup style={{ width: '20vw', margin: '0 auto' }}>\n                    <label><strong>Select a state.&nbsp;&nbsp;</strong></label>\n                    <Select defaultValue=\"Select\" style={{ width: 170 }} onChange={this.handleStateSelected}>\n                    {stateNames.map((item, index) => {\n                      return (<Option key={item} value={item}>{item}</Option>)\n                    })}\n                    </Select>\n                </FormGroup>\n              </Row>\n              <Row>\n                <div><img src={this.state.countyMapLink}></img></div>\n              </Row>\n              <Row>\n                <Table dataSource={this.state.countyResults} columns={countyColumns} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}/>\n              </Row>\n        </Form>\n        </div>\n      );\n  }\n}\n\nexport default QualityPage"]},"metadata":{},"sourceType":"module"}