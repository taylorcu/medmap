{"ast":null,"code":"var _jsxFileName = \"/Users/taylorcunningham/Desktop/Design/project-code/client/src/pages/MapPage.js\";\nimport React, { Component } from 'react';\nimport USAMap from \"react-usa-map\";\nimport { Form, FormInput, FormGroup, Button } from \"shards-react\";\nimport { Table, Pagination, Select, Row } from 'antd';\nimport MenuBar from '../components/MenuBar';\nimport { getNewsRankings, getNameFromCode, getCountiesFromState } from '../fetcher';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Column,\n  ColumnGroup\n} = Table;\nconst {\n  Option\n} = Select;\nconst stateColumns = [{\n  title: 'State',\n  dataIndex: 'Name',\n  key: 'Name'\n}, {\n  title: 'Code',\n  dataIndex: 'Code',\n  key: 'Code'\n}, {\n  title: 'Health Care Access Ranking',\n  dataIndex: 'HealthCareAccessRanking',\n  key: 'HealthCareAccessRanking'\n}, {\n  title: 'Health Care Quality Ranking',\n  dataIndex: 'HealthCareQualityRanking',\n  key: 'HealthCareQualityRanking'\n}, {\n  title: 'Public Health Ranking',\n  dataIndex: 'PublicHealthRanking',\n  key: 'PublicHealthRanking'\n}];\nconst countyColumns = [{\n  title: 'County Name',\n  dataIndex: 'name',\n  key: 'name',\n  sorter: (a, b) => a.name.localeCompare(b.name)\n}, {\n  title: 'Numeric Code',\n  dataIndex: 'fips',\n  key: 'fips'\n}];\n\nclass MapPage extends React.Component {\n  // MAP HANDLER FROM API \n  constructor(props) {\n    super(props);\n\n    this.mapHandler = event => {\n      // alert(event.target.dataset.name);\n      console.log(event.target.dataset.className);\n      this.handleStateSelected(event.target.dataset.name);\n    };\n\n    this.state = {\n      selectedState: \"\",\n      stateResults: [],\n      countyResults: [],\n      stateCodeToNumericRanking: []\n    };\n    this.handleStateSelected = this.handleStateSelected.bind(this);\n  }\n\n  handleStateSelected(stateCode) {\n    // call function to get state name from code \n    getNameFromCode(stateCode).then(res => {\n      console.log(res.results);\n      this.setState({\n        selectedState: res.results[0].Name\n      });\n    }); // call function to get rankings\n\n    getNewsRankings(stateCode).then(res => {\n      this.setState({\n        stateResults: res.results\n      });\n    }); // call function to get list of all counties \n\n    getCountiesFromState(stateCode).then(res => {\n      this.setState({\n        countyResults: res.results\n      });\n    });\n  }\n\n  componentDidMount() {\n    // when component mounts, get code to numeric ranking for all 50 states \n    getCodeToNumericRanking().then(res => {\n      this.setState({\n        stateCodeToNumericRanking: res.results\n      });\n    });\n    data = {\n      \"ME\": \"navy\"\n    }; // configuration for states\n\n    statesCustomConfig = () => {\n      return {\n        \"NJ\": {\n          fill: \"navy\",\n          clickHandler: event => console.log('Custom handler for NJ', event.target.dataset)\n        },\n        \"NY\": {\n          fill: \"#CC0000\"\n        }\n      };\n    }; //var map = new mapboxgl.Map({\n    //  container: 'map',\n    //  style: 'mapbox://styles/mapbox/streets-v11'\n    //});\n\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(MenuBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        style: {\n          width: '80vw',\n          margin: '0 auto',\n          marginTop: '5vh'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \" Welcome to MedMap main interface!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \" Green: top ranking of states with 1-30, Yellow: middle ranking with 30-110, Red: bottom ranking with 110-150\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(USAMap, {\n            customize: this.statesCustomConfig(),\n            onClick: this.mapHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [\"Selected State: \", this.state.selectedState, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 20\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            dataSource: this.state.stateResults,\n            columns: stateColumns,\n            pagination: {\n              pageSizeOptions: [5, 10],\n              defaultPageSize: 5,\n              showQuickJumper: true\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            dataSource: this.state.countyResults,\n            columns: countyColumns,\n            pagination: {\n              pageSizeOptions: [5, 10],\n              defaultPageSize: 5,\n              showQuickJumper: true\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default MapPage;","map":{"version":3,"sources":["/Users/taylorcunningham/Desktop/Design/project-code/client/src/pages/MapPage.js"],"names":["React","Component","USAMap","Form","FormInput","FormGroup","Button","Table","Pagination","Select","Row","MenuBar","getNewsRankings","getNameFromCode","getCountiesFromState","Column","ColumnGroup","Option","stateColumns","title","dataIndex","key","countyColumns","sorter","a","b","name","localeCompare","MapPage","constructor","props","mapHandler","event","console","log","target","dataset","className","handleStateSelected","state","selectedState","stateResults","countyResults","stateCodeToNumericRanking","bind","stateCode","then","res","results","setState","Name","componentDidMount","getCodeToNumericRanking","data","statesCustomConfig","fill","clickHandler","render","width","margin","marginTop","pageSizeOptions","defaultPageSize","showQuickJumper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport USAMap from \"react-usa-map\";\nimport { Form, FormInput, FormGroup, Button, } from \"shards-react\";\nimport {\n  Table,\n  Pagination,\n  Select,\n  Row\n} from 'antd'\n\nimport MenuBar from '../components/MenuBar';\nimport { getNewsRankings, getNameFromCode, getCountiesFromState } from '../fetcher'\nconst { Column, ColumnGroup } = Table;\nconst { Option } = Select;\n\nconst stateColumns = [\n    {\n      title: 'State',\n      dataIndex: 'Name',\n      key: 'Name'\n    },\n    {\n      title: 'Code',\n      dataIndex: 'Code',\n      key: 'Code'\n    },\n    {\n      title: 'Health Care Access Ranking',\n      dataIndex: 'HealthCareAccessRanking',\n      key: 'HealthCareAccessRanking'\n      \n    },\n    {\n      title: 'Health Care Quality Ranking',\n      dataIndex: 'HealthCareQualityRanking',\n      key: 'HealthCareQualityRanking'\n    },\n    {\n        title: 'Public Health Ranking',\n        dataIndex: 'PublicHealthRanking',\n        key: 'PublicHealthRanking'\n    }\n  ];\n\nconst countyColumns = [\n    {\n        title: 'County Name',\n        dataIndex: 'name',\n        key: 'name',\n        sorter: (a, b) => a.name.localeCompare(b.name)\n      },\n      {\n        title: 'Numeric Code',\n        dataIndex: 'fips',\n        key: 'fips'\n      },\n];\n\n\nclass MapPage extends React.Component {\n\n    // MAP HANDLER FROM API \n    mapHandler = (event) => {\n        // alert(event.target.dataset.name);\n        console.log(event.target.dataset.className)\n        this.handleStateSelected(event.target.dataset.name)\n    };\n\n\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n        selectedState: \"\",\n        stateResults: [],\n        countyResults: [],\n        stateCodeToNumericRanking: []\n    }\n\n    this.handleStateSelected = this.handleStateSelected.bind(this)\n\n  }\n\n  handleStateSelected(stateCode) {\n    // call function to get state name from code \n    getNameFromCode(stateCode).then(res => {\n        console.log(res.results)\n        this.setState({ selectedState: res.results[0].Name })\n    })\n\n    // call function to get rankings\n    getNewsRankings(stateCode).then(res => {\n        this.setState({ stateResults: res.results })\n    })\n\n    // call function to get list of all counties \n    getCountiesFromState(stateCode).then(res => {\n        this.setState({ countyResults: res.results })\n    })\n\n}\n\n  componentDidMount() {\n    // when component mounts, get code to numeric ranking for all 50 states \n    getCodeToNumericRanking().then(res => {\n        this.setState({ stateCodeToNumericRanking: res.results })\n    })\n\n    data = { \"ME\" : \"navy\"}\n\n    // configuration for states\n    statesCustomConfig = () => {\n        return {\n            \"NJ\": {\n            fill: \"navy\",\n            clickHandler: (event) => console.log('Custom handler for NJ', event.target.dataset)\n            },\n            \"NY\": {\n            fill: \"#CC0000\"\n            }\n        };\n        };\n\n    //var map = new mapboxgl.Map({\n    //  container: 'map',\n    //  style: 'mapbox://styles/mapbox/streets-v11'\n    //});\n  }\n\n \n  \n\n\n  render() {\n\n    return (\n        <div className=\"App\">\n        <MenuBar />\n        <Form style={{ width: '80vw', margin: '0 auto', marginTop: '5vh' }}>\n            <Row>\n                <h3> Welcome to MedMap main interface!</h3>\n                <h5> Green: top ranking of states with 1-30, Yellow: middle ranking with 30-110, Red: bottom ranking with 110-150</h5>\n            </Row>\n          <Row> \n            <USAMap customize={this.statesCustomConfig()} onClick={this.mapHandler} />\n          </Row>\n          <Row>\n            <label><strong>Selected State: {this.state.selectedState} </strong></label>\n        </Row><Row>\n            <Table dataSource={this.state.stateResults} columns={stateColumns} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}/>\n          </Row>\n          <Row>\n          <Table dataSource={this.state.countyResults} columns={countyColumns} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}/>\n          </Row>\n        \n        </Form>\n        </div>\n      );\n  }\n}\n\nexport default MapPage"]},"metadata":{},"sourceType":"module"}