{"ast":null,"code":"var _jsxFileName = \"/Users/taylorcunningham/Desktop/Design/project-code/client/src/pages/QualityPage.js\";\nimport React, { Component } from 'react';\nimport USAMap from \"react-usa-map\";\nimport { Form, FormInput, FormGroup, Button } from \"shards-react\";\nimport { Table, Pagination, Select, Row } from 'antd';\nimport MenuBar from '../components/MenuBar';\nimport { stateNames } from '../components/StateNameArray';\nimport { getCountiesFromStateName, getCountyMapLink, getCountyMortalityResults } from '../fetcher';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Column,\n  ColumnGroup\n} = Table;\nconst {\n  Option\n} = Select; // COLUMNS FOR COUNTY DISPLAY\n\nconst countyColumns = [{\n  title: 'County Name',\n  dataIndex: 'name',\n  key: 'name',\n  sorter: (a, b) => a.name.localeCompare(b.name)\n}, {\n  title: 'Numeric Code',\n  dataIndex: 'fips',\n  key: 'fips'\n}]; // COLUMNS FOR MORTALITY RATE COUNTY DISPLAY\n// TO DO\n\nconst countyMortalityColumns1 = [{\n  title: 'County Name',\n  dataIndex: 'name',\n  key: 'name',\n  sorter: (a, b) => a.name.localeCompare(b.name)\n}, {\n  title: 'Neonatal Disorders',\n  dataIndex: 'MRNN',\n  key: 'MRNN',\n  sorter: (a, b) => a.MRNN - b.MRNN\n}, {\n  title: 'HIV/AIDS and Tuberculosis',\n  dataIndex: 'MRHIV',\n  key: 'MRHIV',\n  sorter: (a, b) => a.MRHIV - b.MRHIV\n}, {\n  title: 'Musculoskeletal Disorders',\n  dataIndex: 'MRMUS',\n  key: 'MRMUS',\n  sorter: (a, b) => a.MRMUS - b.MRMUS\n}];\nconst countyMortalityColumns2 = [{\n  title: 'County Name',\n  dataIndex: 'name',\n  key: 'name',\n  sorter: (a, b) => a.name.localeCompare(b.name)\n}, {\n  title: 'Digestive Diseases',\n  dataIndex: 'MRDIG',\n  key: 'MRDIG',\n  sorter: (a, b) => a.MRDIG - b.MRDIG\n}, {\n  title: 'Chronic Respiratory Diseases',\n  dataIndex: 'MRRESP',\n  key: 'MRRESP',\n  sorter: (a, b) => a.MRRESP - b.MRRESP\n}, {\n  title: 'Diabetes, Urogenital, Blood, and Endocrine Diseases',\n  dataIndex: 'MRDIA',\n  key: 'MRDIA',\n  sorter: (a, b) => a.MRDIA - b.MRDIA\n}];\nconst countyMortalityColumns3 = [{\n  title: 'County Name',\n  dataIndex: 'name',\n  key: 'name',\n  sorter: (a, b) => a.name.localeCompare(b.name)\n}, {\n  title: 'Neurological Diseases',\n  dataIndex: 'MRNUER',\n  key: 'MRNUER',\n  sorter: (a, b) => a.MRNUER - b.MRNUER\n}, {\n  title: 'Cirrhosis and Other Chronic Liver Diseases',\n  dataIndex: 'MRLIV',\n  key: 'MRLIV',\n  sorter: (a, b) => a.MRLIV - b.MRLIV\n}, {\n  title: 'Cardiovasculur Diseases',\n  dataIndex: 'MRCARD',\n  key: 'MRCARD',\n  sorter: (a, b) => a.MRCARD - b.MRCARD\n}, {\n  title: 'Maternal Disorders',\n  dataIndex: 'MRMAT',\n  key: 'MRMAT',\n  sorter: (a, b) => a.MRMAT - b.MRMAT\n}];\n\nclass QualityPage extends React.Component {\n  // CLASS CONSTRUCTOR\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedState: \"\",\n      countyMapLink: \"\",\n      countyResults: [],\n      countyMortalityResults1: [],\n      countyMortalityResults2: [],\n      countyMortalityResults3: []\n    };\n    this.handleStateSelected = this.handleStateSelected.bind(this); //this.setStateRankingMethod = this.setStateRankingMethod.bind(this)\n    //this.mapHandler = this.mapHandler.bind(this)\n    //this.statesCustomConfig = this.statesCustomConfig.bind(this)\n  } // HANDLE STATE BEING SELECTED, GET DATA\n\n\n  handleStateSelected(value) {\n    // set state \n    this.setState({\n      selectedState: value\n    }); // call function to get county map link \n\n    getCountyMapLink(value).then(res => {\n      this.setState({\n        countyMapLink: res.results[0].Link\n      });\n    }); // call function to get list of all counties \n\n    getCountiesFromStateName(value).then(res => {\n      this.setState({\n        countyResults: res.results\n      });\n    }); // call function to get data for all county mortality results\n\n    getCountyMortalityResults1(value).then(res => {\n      this.setState({\n        countyMortalityResults1: res.results\n      });\n    });\n  }\n  /*\n  // SET STATE RANKING METHOD FROM DROPDOWN\n  setStateRankingMethod(value) {\n      // set state ranking method internally \n      this.setState({ stateRankingMethod: value })\n       // call function to get values and change colors accordingly \n      if (value == \"HealthCareAccess\") {\n          getAccessRankings().then(res => {\n              this.setState({ stateCodeToNumericRanking: res.results })\n          });\n      } else if (value == \"Overall\") {\n          getCodeToNumericRanking().then(res => {\n              this.setState({ stateCodeToNumericRanking: res.results })\n          });\n      } else if (value == \"HealthCareQuality\") {\n          getQualityRankings().then(res => {\n              this.setState({ stateCodeToNumericRanking: res.results })\n          });\n      } else if (value == \"PublicHealth\") {\n          getPublicHealthRankings().then(res => {\n              this.setState({ stateCodeToNumericRanking: res.results })\n          });\n      }\n  }  \n  */\n\n\n  componentDidMount() {\n    /*\n    // when component originally mounts, set overall rankings\n     getCodeToNumericRanking().then(res => {\n        this.setState({ stateCodeToNumericRanking: res.results })\n    }); \n    */\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(MenuBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        style: {\n          width: '80vw',\n          margin: '0 auto',\n          marginTop: '5vh'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \" Quality of Healthcare by State\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \" On this page, you can select a state and see its rankings and data about the quality of healthcare within each county. These metrics are determined based on: TODO. Select a state to start.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(FormGroup, {\n            style: {\n              width: '20vw',\n              margin: '0 auto'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Select a state.\\xA0\\xA0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 28\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              defaultValue: \"Select\",\n              style: {\n                width: 170\n              },\n              onChange: this.handleStateSelected,\n              children: stateNames.map((item, index) => {\n                return /*#__PURE__*/_jsxDEV(Option, {\n                  value: item,\n                  children: item\n                }, item, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 31\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.countyMapLink\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 22\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            dataSource: this.state.countyResults,\n            columns: countyColumns,\n            pagination: {\n              pageSizeOptions: [5, 10],\n              defaultPageSize: 5,\n              showQuickJumper: true\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"County morality rate for selected conditions, compiled by JAMA, as of 2014.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 24\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Table, {\n            dataSource: this.state.countyMortalityResults,\n            columns: countyMortalityColumns,\n            pagination: {\n              pageSizeOptions: [5, 10],\n              defaultPageSize: 5,\n              showQuickJumper: true\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default QualityPage;","map":{"version":3,"sources":["/Users/taylorcunningham/Desktop/Design/project-code/client/src/pages/QualityPage.js"],"names":["React","Component","USAMap","Form","FormInput","FormGroup","Button","Table","Pagination","Select","Row","MenuBar","stateNames","getCountiesFromStateName","getCountyMapLink","getCountyMortalityResults","Column","ColumnGroup","Option","countyColumns","title","dataIndex","key","sorter","a","b","name","localeCompare","countyMortalityColumns1","MRNN","MRHIV","MRMUS","countyMortalityColumns2","MRDIG","MRRESP","MRDIA","countyMortalityColumns3","MRNUER","MRLIV","MRCARD","MRMAT","QualityPage","constructor","props","state","selectedState","countyMapLink","countyResults","countyMortalityResults1","countyMortalityResults2","countyMortalityResults3","handleStateSelected","bind","value","setState","then","res","results","Link","getCountyMortalityResults1","componentDidMount","render","width","margin","marginTop","map","item","index","pageSizeOptions","defaultPageSize","showQuickJumper","countyMortalityResults","countyMortalityColumns"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport USAMap from \"react-usa-map\";\nimport { Form, FormInput, FormGroup, Button, } from \"shards-react\";\nimport {\n  Table,\n  Pagination,\n  Select,\n  Row\n} from 'antd'\n\nimport MenuBar from '../components/MenuBar';\nimport { stateNames } from '../components/StateNameArray';\nimport { getCountiesFromStateName, getCountyMapLink, getCountyMortalityResults } from '../fetcher'\nconst { Column, ColumnGroup } = Table;\nconst { Option } = Select;\n\n\n// COLUMNS FOR COUNTY DISPLAY\nconst countyColumns = [\n    {\n        title: 'County Name',\n        dataIndex: 'name',\n        key: 'name',\n        sorter: (a, b) => a.name.localeCompare(b.name)\n      },\n      {\n        title: 'Numeric Code',\n        dataIndex: 'fips',\n        key: 'fips'\n      },\n];\n\n// COLUMNS FOR MORTALITY RATE COUNTY DISPLAY\n// TO DO\nconst countyMortalityColumns1 = [\n    {\n        title: 'County Name',\n        dataIndex: 'name',\n        key: 'name',\n        sorter: (a, b) => a.name.localeCompare(b.name)\n      },\n      {\n        title: 'Neonatal Disorders',\n        dataIndex: 'MRNN',\n        key: 'MRNN',\n        sorter: (a, b) => a.MRNN - b.MRNN\n      },\n      {\n        title: 'HIV/AIDS and Tuberculosis',\n        dataIndex: 'MRHIV',\n        key: 'MRHIV',\n        sorter: (a, b) => a.MRHIV - b.MRHIV\n      },\n      {\n        title: 'Musculoskeletal Disorders',\n        dataIndex: 'MRMUS',\n        key: 'MRMUS',\n        sorter: (a, b) => a.MRMUS - b.MRMUS\n      }\n]; \n\nconst countyMortalityColumns2 = [\n    {\n        title: 'County Name',\n        dataIndex: 'name',\n        key: 'name',\n        sorter: (a, b) => a.name.localeCompare(b.name)\n      },\n      {\n        title: 'Digestive Diseases',\n        dataIndex: 'MRDIG',\n        key: 'MRDIG',\n        sorter: (a, b) => a.MRDIG - b.MRDIG\n      },\n      {\n        title: 'Chronic Respiratory Diseases',\n        dataIndex: 'MRRESP',\n        key: 'MRRESP',\n        sorter: (a, b) => a.MRRESP - b.MRRESP\n      },\n      {\n        title: 'Diabetes, Urogenital, Blood, and Endocrine Diseases',\n        dataIndex: 'MRDIA',\n        key: 'MRDIA',\n        sorter: (a, b) => a.MRDIA - b.MRDIA\n      },\n      \n]; \n\nconst countyMortalityColumns3 = [\n    {\n        title: 'County Name',\n        dataIndex: 'name',\n        key: 'name',\n        sorter: (a, b) => a.name.localeCompare(b.name)\n      },\n      {\n        title: 'Neurological Diseases',\n        dataIndex: 'MRNUER',\n        key: 'MRNUER',\n        sorter: (a, b) => a.MRNUER - b.MRNUER\n      },\n      {\n        title: 'Cirrhosis and Other Chronic Liver Diseases',\n        dataIndex: 'MRLIV',\n        key: 'MRLIV',\n        sorter: (a, b) => a.MRLIV - b.MRLIV\n      },\n      {\n        title: 'Cardiovasculur Diseases',\n        dataIndex: 'MRCARD',\n        key: 'MRCARD',\n        sorter: (a, b) => a.MRCARD - b.MRCARD\n      },\n      {\n        title: 'Maternal Disorders',\n        dataIndex: 'MRMAT',\n        key: 'MRMAT',\n        sorter: (a, b) => a.MRMAT - b.MRMAT\n      }\n      \n]; \n\nclass QualityPage extends React.Component {\n    // CLASS CONSTRUCTOR\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            selectedState: \"\",\n            countyMapLink: \"\",\n            countyResults: [],\n            countyMortalityResults1: [],\n            countyMortalityResults2: [],\n            countyMortalityResults3: []\n        }\n\n        this.handleStateSelected = this.handleStateSelected.bind(this)\n        //this.setStateRankingMethod = this.setStateRankingMethod.bind(this)\n        //this.mapHandler = this.mapHandler.bind(this)\n        //this.statesCustomConfig = this.statesCustomConfig.bind(this)\n    }\n\n    // HANDLE STATE BEING SELECTED, GET DATA\n    handleStateSelected(value) {\n        // set state \n        this.setState({ selectedState: value });\n\n        // call function to get county map link \n        getCountyMapLink(value).then(res => {\n            this.setState({countyMapLink: res.results[0].Link })\n        });\n\n        // call function to get list of all counties \n        getCountiesFromStateName(value).then(res => {\n            this.setState({ countyResults: res.results });\n        });\n        \n        // call function to get data for all county mortality results\n        getCountyMortalityResults1(value).then(res => {\n            this.setState({ countyMortalityResults1: res.results});\n        });\n\n        \n    }\n\n    /*\n    // SET STATE RANKING METHOD FROM DROPDOWN\n    setStateRankingMethod(value) {\n        // set state ranking method internally \n        this.setState({ stateRankingMethod: value })\n\n        // call function to get values and change colors accordingly \n        if (value == \"HealthCareAccess\") {\n            getAccessRankings().then(res => {\n                this.setState({ stateCodeToNumericRanking: res.results })\n            });\n        } else if (value == \"Overall\") {\n            getCodeToNumericRanking().then(res => {\n                this.setState({ stateCodeToNumericRanking: res.results })\n            });\n        } else if (value == \"HealthCareQuality\") {\n            getQualityRankings().then(res => {\n                this.setState({ stateCodeToNumericRanking: res.results })\n            });\n        } else if (value == \"PublicHealth\") {\n            getPublicHealthRankings().then(res => {\n                this.setState({ stateCodeToNumericRanking: res.results })\n            });\n        }\n    }  \n    */\n\n    componentDidMount() {\n        /*\n        // when component originally mounts, set overall rankings\n         getCodeToNumericRanking().then(res => {\n            this.setState({ stateCodeToNumericRanking: res.results })\n        }); \n        */\n    } \n\n  render() {\n\n    return (\n        <div className=\"App\">\n        <MenuBar />\n        <Form style={{ width: '80vw', margin: '0 auto', marginTop: '5vh' }}>\n            <Row>\n                <h3> Quality of Healthcare by State</h3>\n                <p> On this page, you can select a state and see its rankings and data about the quality of healthcare within each \n                    county. These metrics are determined based on: TODO. Select a state to start. \n                </p>\n            </Row>\n            <Row>\n                <FormGroup style={{ width: '20vw', margin: '0 auto' }}>\n                    <label><strong>Select a state.&nbsp;&nbsp;</strong></label>\n                    <Select defaultValue=\"Select\" style={{ width: 170 }} onChange={this.handleStateSelected}>\n                    {stateNames.map((item, index) => {\n                      return (<Option key={item} value={item}>{item}</Option>)\n                    })}\n                    </Select>\n                </FormGroup>\n              </Row>\n              <Row>\n                <div><img src={this.state.countyMapLink}></img></div>\n              </Row>\n              <Row>\n                <Table dataSource={this.state.countyResults} columns={countyColumns} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}/>\n              </Row>\n              <Row>\n                <label><strong>County morality rate for selected conditions, compiled by JAMA, as of 2014.</strong></label>\n                <Table dataSource={this.state.countyMortalityResults} columns={countyMortalityColumns} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}/>\n              </Row>\n        </Form>\n        </div>\n      );\n  }\n}\n\nexport default QualityPage"]},"metadata":{},"sourceType":"module"}